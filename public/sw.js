
// Cache name - update version to force refresh
const CACHE_NAME = 'spasi-bg-v8';

// Files to cache
const urlsToCache = [
  '/',
  '/index.html',
  '/manifest.json',
  '/icon-192.png',
  '/icon-512.png'
];

console.log('üü¢ Service Worker –∑–∞—Ä–µ–¥–µ–Ω, –≤–µ—Ä—Å–∏—è:', CACHE_NAME);

// Install event
self.addEventListener('install', (event) => {
  // Force the waiting service worker to become the active service worker
  self.skipWaiting();
  
  console.log('üü¢ Service Worker: –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ...');
  
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('üü¢ Service Worker: –∫–µ—à–∏—Ä–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏ —Ä–µ—Å—É—Ä—Å–∏');
        return cache.addAll(urlsToCache);
      })
  );
});

// Fetch event - add network-first strategy for HTML and API requests
self.addEventListener('fetch', (event) => {
  // Check if this is a navigation request (HTML)
  const isNavigationRequest = event.request.mode === 'navigate';
  const isHTMLRequest = event.request.headers.get('accept')?.includes('text/html');
  const isAPIRequest = event.request.url.includes('/api/') || 
                      event.request.url.includes('supabase');
  
  // –ó–∞ OneSignal –∑–∞—è–≤–∫–∏, –ø–æ–∑–≤–æ–ª—è–≤–∞–º–µ –¥–∏—Ä–µ–∫—Ç–µ–Ω –¥–æ—Å—Ç—ä–ø –¥–æ –º—Ä–µ–∂–∞—Ç–∞
  if (event.request.url.includes('onesignal')) {
    return;
  }
  
  // For HTML navigation or API requests, use network-first strategy
  if (isNavigationRequest || isHTMLRequest || isAPIRequest) {
    event.respondWith(
      fetch(event.request)
        .then(response => {
          // Clone the response to store in cache
          const responseToCache = response.clone();
          
          caches.open(CACHE_NAME)
            .then(cache => {
              cache.put(event.request, responseToCache);
            });
            
          return response;
        })
        .catch(() => {
          // If network fails, try to get from cache
          return caches.match(event.request);
        })
    );
  } else {
    // For other requests, use cache-first strategy
    event.respondWith(
      caches.match(event.request)
        .then((response) => {
          // Cache hit - return response
          if (response) {
            return response;
          }
          return fetch(event.request);
        })
    );
  }
});

// Activate event - clean up old caches and claim clients
self.addEventListener('activate', (event) => {
  console.log('üü¢ Service Worker: –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–µ...');
  
  // Take control of all clients immediately
  event.waitUntil(clients.claim());
  
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            console.log('üü¢ Service Worker: –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ä –∫–µ—à', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  
  // After activation, immediately update all clients
  self.clients.matchAll().then(clients => {
    clients.forEach(client => client.postMessage({ type: 'UPDATE_READY' }));
  });
});

// Add event listener for push notifications
self.addEventListener('push', function(event) {
  try {
    console.log('üü¢ –ü–æ–ª—É—á–µ–Ω–æ push —Å—ä–æ–±—â–µ–Ω–∏–µ', event);
    
    let data;
    try {
      data = event.data.json();
    } catch (e) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–≤–∞–Ω–µ –Ω–∞ push –¥–∞–Ω–Ω–∏:', e);
      data = {
        title: '–ù–æ–≤–æ —Å—ä–æ–±—â–µ–Ω–∏–µ',
        body: '–ü–æ–ª—É—á–µ–Ω–æ –µ –Ω–æ–≤–æ —Å—ä–æ–±—â–µ–Ω–∏–µ –æ—Ç –°–ø–∞—Å–∏ –ë–ì',
        url: '/'
      };
    }
    
    const options = {
      body: data.body || '–ü–æ–ª—É—á–µ–Ω–æ –µ –Ω–æ–≤–æ —Å—ä–æ–±—â–µ–Ω–∏–µ –æ—Ç –°–ø–∞—Å–∏ –ë–ì',
      icon: '/icon-192.png',
      badge: '/icon-192.png',
      data: {
        url: data.url || '/'
      }
    };

    console.log('üü¢ –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∏–∑–≤–µ—Å—Ç–∏–µ:', data.title, options);
    
    event.waitUntil(
      self.registration.showNotification(data.title || '–ù–æ–≤–æ —Å—ä–æ–±—â–µ–Ω–∏–µ', options)
    );
  } catch (error) {
    console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ push –∏–∑–≤–µ—Å—Ç–∏–µ:', error);
  }
});

// Add event listener for notification click
self.addEventListener('notificationclick', function(event) {
  console.log('üü¢ –ò–∑–≤–µ—Å—Ç–∏–µ—Ç–æ –µ –∫–ª–∏–∫–Ω–∞—Ç–æ', event);
  
  event.notification.close();
  event.waitUntil(
    clients.openWindow(event.notification.data.url || '/')
  );
});

// Important: Load OneSignal's service worker BEFORE any other code
// This ensures the OneSignal SDK can properly handle push messages
// –∏ —Å–µ –∏–∑–ø—ä–ª–Ω—è–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–∞—à–∏—è service worker
console.log('üü¢ –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ OneSignal Service Worker');
self.importScripts('https://cdn.onesignal.com/sdks/web/v16/OneSignalSDK.sw.js');
