
import React, { useState, useEffect } from 'react';
import { Bell } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { toast } from '@/hooks/use-toast';
import { useAuth } from '@/components/AuthProvider';

const NotificationButton = () => {
  const [isSubscribing, setIsSubscribing] = useState(false);
  const [isSubscribed, setIsSubscribed] = useState(false);
  const { user } = useAuth();

  // –ü—Ä–æ–≤–µ—Ä—è–≤–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ –∞–±–æ–Ω–∞–º–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    checkSubscriptionStatus();
    
    // –î–æ–±–∞–≤—è–º–µ –≥–ª–æ–±–∞–ª–µ–Ω —Å–ª—É—à–∞—Ç–µ–ª –∑–∞ –ø—Ä–æ–º–µ–Ω–∏ –≤ –∞–±–æ–Ω–∞–º–µ–Ω—Ç–∞
    if (window.OneSignal) {
      console.log("üü¢ –ù–∞—Å—Ç—Ä–æ–π–≤–∞–º–µ OneSignal —Å–ª—É—à–∞—Ç–µ–ª –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ");
      window.OneSignal.User.PushSubscription.addEventListener('change', handleSubscriptionChange);
    }
    
    return () => {
      if (window.OneSignal) {
        window.OneSignal.User.PushSubscription.removeEventListener('change', handleSubscriptionChange);
      }
    };
  }, []);

  const checkSubscriptionStatus = async () => {
    try {
      if (!window.OneSignal) {
        console.error("‚ùå OneSignal –Ω–µ –µ –∑–∞—Ä–µ–¥–µ–Ω");
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ SDK –µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω
      if (!window.OneSignal.initialized) {
        console.log("‚è≥ –ò–∑—á–∞–∫–≤–∞–º–µ OneSignal –¥–∞ —Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞...");
        // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ deferred —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞ –¥–∞ –∏–∑—á–∞–∫–∞–º–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è—Ç–∞
        window.OneSignalDeferred.push(async function() {
          checkSubscriptionStatus();
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –±—Ä–∞—É–∑—ä—Ä—ä—Ç –ø–æ–¥–¥—ä—Ä–∂–∞ push –∏–∑–≤–µ—Å—Ç–∏—è
      const isPushSupported = await window.OneSignal.isPushNotificationsSupported();
      console.log(`üîî Push –∏–∑–≤–µ—Å—Ç–∏—è—Ç–∞ —Å–µ –ø–æ–¥–¥—ä—Ä–∂–∞—Ç: ${isPushSupported ? '–¥–∞' : '–Ω–µ'}`);
      
      if (!isPushSupported) {
        toast({
          title: "–ò–∑–≤–µ—Å—Ç–∏—è—Ç–∞ –Ω–µ —Å–µ –ø–æ–¥–¥—ä—Ä–∂–∞—Ç",
          description: "–¢–æ–∑–∏ –±—Ä–∞—É–∑—ä—Ä –Ω–µ –ø–æ–¥–¥—ä—Ä–∂–∞ push –∏–∑–≤–µ—Å—Ç–∏—è",
          variant: "destructive"
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –∞–±–æ–Ω–∏—Ä–∞–Ω
      const isPushSubscriptionActive = await window.OneSignal.User.PushSubscription.optedIn;
      const playerId = await window.OneSignal.User.PushSubscription.id;
      
      setIsSubscribed(isPushSubscriptionActive);
      
      console.log(`üîî –¢–µ–∫—É—â —Å—Ç–∞—Ç—É—Å –Ω–∞ –∞–±–æ–Ω–∞–º–µ–Ω—Ç–∞: ${isPushSubscriptionActive ? '–∞–±–æ–Ω–∏—Ä–∞–Ω' : '–Ω–µ–∞–±–æ–Ω–∏—Ä–∞–Ω'}`);
      console.log(`üÜî Player ID: ${playerId || '–Ω—è–º–∞'}`);
      
      // –ê–∫–æ –µ –∞–±–æ–Ω–∏—Ä–∞–Ω, –Ω–æ –Ω—è–º–∞–º–µ –∑–∞–ø–∏—Å–∞–Ω ID, –∑–∞–ø–∏—Å–≤–∞–º–µ –≥–æ –≤ Supabase
      if (isPushSubscriptionActive && playerId) {
        saveSubscriptionToDatabase(playerId);
      }
    } catch (error) {
      console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–±–æ–Ω–∞–º–µ–Ω—Ç–∞:", error);
      toast({
        title: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞ –≥—Ä–µ—à–∫–∞",
        description: "–ù–µ –º–æ–∂–∞—Ö–º–µ –¥–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –∞–±–æ–Ω–∞–º–µ–Ω—Ç–∞",
        variant: "destructive"
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ø—Ä–æ–º–µ–Ω–∏ –≤ –∞–±–æ–Ω–∞–º–µ–Ω—Ç–∞ –æ—Ç OneSignal
  const handleSubscriptionChange = async (event) => {
    try {
      console.log("üîÑ –ü—Ä–æ–º—è–Ω–∞ –≤ push –∞–±–æ–Ω–∞–º–µ–Ω—Ç–∞", event);
      
      const isSubscribed = await window.OneSignal.User.PushSubscription.optedIn;
      const playerId = await window.OneSignal.User.PushSubscription.id;
      
      console.log(`üîî –ù–æ–≤ —Å—Ç–∞—Ç—É—Å: ${isSubscribed ? '–∞–±–æ–Ω–∏—Ä–∞–Ω' : '–Ω–µ–∞–±–æ–Ω–∏—Ä–∞–Ω'}, ID: ${playerId || '–Ω—è–º–∞'}`);
      
      setIsSubscribed(isSubscribed);
      
      if (isSubscribed && playerId) {
        await saveSubscriptionToDatabase(playerId);
      }
    } catch (error) {
      console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ø—Ä–æ–º—è–Ω–∞ –≤ –∞–±–æ–Ω–∞–º–µ–Ω—Ç–∞:", error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ –∞–±–æ–Ω–∞–º–µ–Ω—Ç–∞ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
  const saveSubscriptionToDatabase = async (playerId) => {
    try {
      console.log("üíæ –û–ø–∏—Ç–≤–∞–º–µ —Å–µ –¥–∞ –∑–∞–ø–∏—à–µ–º –∞–±–æ–Ω–∞–º–µ–Ω—Ç —Å ID:", playerId);
      
      if (!window.supabase) {
        console.error("‚ùå Supabase –∫–ª–∏–µ–Ω—Ç—ä—Ç –Ω–µ –µ –¥–æ—Å—Ç—ä–ø–µ–Ω");
        return;
      }
      
      const userId = user?.id || null;
      
      const { error } = await window.supabase
        .from('push_subscribers')
        .upsert([{
          user_id: userId,
          player_id: playerId,
          updated_at: new Date().toISOString()
        }], { onConflict: 'player_id' });
      
      if (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å –Ω–∞ –∞–±–æ–Ω–∞–º–µ–Ω—Ç:", error);
        throw error;
      }
      
      console.log("‚úÖ Push –∞–±–æ–Ω–∞—Ç—ä—Ç –µ –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
      
      // –°–ª–µ–¥ —É—Å–ø–µ—à–µ–Ω –∑–∞–ø–∏—Å –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏, –ø–æ–∫–∞–∑–≤–∞–º–µ –∏–∑–≤–µ—Å—Ç–∏–µ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ
      toast({
        title: "–£—Å–ø–µ—à–µ–Ω –∞–±–æ–Ω–∞–º–µ–Ω—Ç",
        description: "–í–µ—á–µ —â–µ –ø–æ–ª—É—á–∞–≤–∞—Ç–µ –∏–∑–≤–µ—Å—Ç–∏—è –∑–∞ –Ω–æ–≤–∏ —Å–∏–≥–Ω–∞–ª–∏",
        variant: "default"
      });
    } catch (error) {
      console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å –Ω–∞ –∞–±–æ–Ω–∞–º–µ–Ω—Ç:", error);
    }
  };

  const handleSubscribe = async () => {
    try {
      setIsSubscribing(true);
      
      // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ OneSignal –µ –∑–∞—Ä–µ–¥–µ–Ω
      if (!window.OneSignal) {
        throw new Error("OneSignal –Ω–µ –µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω");
      }

      console.log("üîî –ó–∞–ø–æ—á–≤–∞–º–µ –ø—Ä–æ—Ü–µ—Å–∞ –Ω–∞ –∞–±–æ–Ω–∏—Ä–∞–Ω–µ...");
      
      // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –±—Ä–∞—É–∑—ä—Ä—ä—Ç –ø–æ–¥–¥—ä—Ä–∂–∞ push –∏–∑–≤–µ—Å—Ç–∏—è
      const isPushSupported = await window.OneSignal.isPushNotificationsSupported();
      if (!isPushSupported) {
        throw new Error("–¢–æ–∑–∏ –±—Ä–∞—É–∑—ä—Ä –Ω–µ –ø–æ–¥–¥—ä—Ä–∂–∞ push –∏–∑–≤–µ—Å—Ç–∏—è");
      }
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª–Ω–æ –æ—Ç–≤–∞—Ä—è–º–µ –¥–∏–∞–ª–æ–≥–∞ –∑–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ –∏–∑—á–∞–∫–≤–∞–º–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –¥–∞ –∏–∑–±–µ—Ä–µ
      const result = await window.OneSignal.Slidedown.promptPush({
        force: true,
        forceSlidedownOverNative: true
      });
      
      console.log("üìä –†–µ–∑—É–ª—Ç–∞—Ç –æ—Ç –¥–∏–∞–ª–æ–≥–∞:", result);
      
      // –ò–∑—á–∞–∫–≤–∞–º–µ –º–∞–ª–∫–æ, –∑–∞ –¥–∞ –º–æ–∂–µ –ø—Ä–æ–º—è–Ω–∞—Ç–∞ –≤ –∞–±–æ–Ω–∞–º–µ–Ω—Ç–∞ –¥–∞ —Å–µ –æ—Ç—Ä–∞–∑–∏
      setTimeout(async () => {
        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –æ—Ç–Ω–æ–≤–æ —Å—Ç–∞—Ç—É—Å–∞ –∏ –∏–∑–ø—Ä–∞—â–∞–º–µ —Ä—ä—á–Ω–æ –∫—ä–º OneSignal —Å—ä—Ä–≤—ä—Ä–∞
        const isOptedIn = await window.OneSignal.User.PushSubscription.optedIn;
        const playerId = await window.OneSignal.User.PushSubscription.id;
        
        console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–µ–¥ –∞–±–æ–Ω–∏—Ä–∞–Ω–µ:", { isOptedIn, playerId });
        
        if (isOptedIn && playerId) {
          // –ó–∞–ø–∏—Å–≤–∞–º–µ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
          await saveSubscriptionToDatabase(playerId);
          setIsSubscribed(true);
        } else {
          console.log("‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ –µ –∞–±–æ–Ω–∏—Ä–∞–Ω —Å–ª–µ–¥ –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ –Ω—è–º–∞ playerId");
        }
        
        setIsSubscribing(false);
      }, 2000);
      
    } catch (error) {
      console.error("‚ùå –û–±—âa –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–±–æ–Ω–∏—Ä–∞–Ω–µ:", error);
      toast({
        title: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞ –≥—Ä–µ—à–∫–∞",
        description: error.message || "–ù–µ –º–æ–∂–∞—Ö–º–µ –¥–∞ –æ–±—Ä–∞–±–æ—Ç–∏–º –∞–±–æ–Ω–∞–º–µ–Ω—Ç–∞",
        variant: "destructive"
      });
      setIsSubscribing(false);
    }
  };

  return (
    <Button
      className="bg-spasi-green hover:bg-spasi-green/90 text-white py-6 px-8 rounded-lg text-lg font-medium flex items-center gap-2 relative group overflow-hidden"
      onClick={handleSubscribe}
      disabled={isSubscribing || isSubscribed}
    >
      <span className="absolute inset-0 w-0 bg-white/20 transition-all duration-300 ease-out group-hover:w-full"></span>
      <Bell className="h-5 w-5 relative z-10" />
      <span className="relative z-10">
        {isSubscribing 
          ? "–û–±—Ä–∞–±–æ—Ç–∫–∞..." 
          : isSubscribed 
            ? "–ê–±–æ–Ω–∏—Ä–∞–Ω–∏ —Å—Ç–µ" 
            : "–ê–±–æ–Ω–∏—Ä–∞–π —Å–µ"
        }
      </span>
    </Button>
  );
};

export default NotificationButton;
