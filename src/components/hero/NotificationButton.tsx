
import React, { useState, useEffect } from 'react';
import { Bell } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { toast } from '@/hooks/use-toast';
import { useAuth } from '@/components/AuthProvider';

const NotificationButton = () => {
  const [isSubscribing, setIsSubscribing] = useState(false);
  const [isSubscribed, setIsSubscribed] = useState(false);
  const { user } = useAuth();

  useEffect(() => {
    const checkSubscriptionStatus = async () => {
      try {
        if (!window.OneSignal) {
          console.error("‚ùå OneSignal –Ω–µ –µ –∑–∞—Ä–µ–¥–µ–Ω");
          return;
        }

        const isPushEnabled = await window.OneSignal.User.PushSubscription.optedIn;
        setIsSubscribed(isPushEnabled);
        console.log(`üîî –°—Ç–∞—Ç—É—Å –Ω–∞ –∞–±–æ–Ω–∞–º–µ–Ω—Ç–∞: ${isPushEnabled ? '–∞–±–æ–Ω–∏—Ä–∞–Ω' : '–Ω–µ–∞–±–æ–Ω–∏—Ä–∞–Ω'}`);
      } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–±–æ–Ω–∞–º–µ–Ω—Ç–∞:", error);
        toast({
          title: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞ –≥—Ä–µ—à–∫–∞",
          description: "–ù–µ –º–æ–∂–∞—Ö–º–µ –¥–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –∞–±–æ–Ω–∞–º–µ–Ω—Ç–∞",
          variant: "destructive"
        });
      }
    };

    checkSubscriptionStatus();
  }, []);

  const handleSubscribe = async () => {
    try {
      setIsSubscribing(true);
      
      if (!window.OneSignal) {
        throw new Error("OneSignal –Ω–µ –µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω");
      }

      const isPushEnabled = await window.OneSignal.User.PushSubscription.optedIn;
      
      if (isPushEnabled) {
        setIsSubscribed(true);
        toast({
          title: "–í–µ—á–µ —Å—Ç–µ –∞–±–æ–Ω–∏—Ä–∞–Ω–∏",
          description: "–ü–æ–ª—É—á–∞–≤–∞—Ç–µ –∏–∑–≤–µ—Å—Ç–∏—è –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ç–∞",
        });
        return;
      }

      console.log("üîî –ó–∞–ø–æ—á–≤–∞–º–µ –ø—Ä–æ—Ü–µ—Å–∞ –Ω–∞ –∞–±–æ–Ω–∏—Ä–∞–Ω–µ...");
      
      const unsubscribe = window.OneSignal.User.PushSubscription.addEventListener('change', async (event) => {
        try {
          const isNowEnabled = await window.OneSignal.User.PushSubscription.optedIn;
          
          if (isNowEnabled) {
            setIsSubscribed(true);
            const playerId = await window.OneSignal.User.PushSubscription.id;
            
            console.log(`üîî –ü–æ–ª—É—á–µ–Ω OneSignal player_id: ${playerId}`);
            
            if (window.supabase && playerId) {
              const userId = user?.id || null;
              
              const { error } = await window.supabase
                .from('push_subscribers')
                .upsert([{
                  user_id: userId,
                  player_id: playerId
                }], { onConflict: 'player_id' });
              
              if (error) {
                console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å –Ω–∞ –∞–±–æ–Ω–∞–º–µ–Ω—Ç:", error);
                throw error;
              }
              
              console.log("‚úÖ Push –∞–±–æ–Ω–∞—Ç—ä—Ç –µ –∑–∞–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
            }
            
            toast({
              title: "–£—Å–ø–µ—à–Ω–æ –∞–±–æ–Ω–∏—Ä–∞–Ω–µ",
              description: "–©–µ –ø–æ–ª—É—á–∞–≤–∞—Ç–µ –∏–∑–≤–µ—Å—Ç–∏—è –∑–∞ –Ω–æ–≤–∏ —Å–∏–≥–Ω–∞–ª–∏",
            });
          }
        } catch (error) {
          console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∞–±–æ–Ω–∞–º–µ–Ω—Ç–∞:", error);
          toast({
            title: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–±–æ–Ω–∏—Ä–∞–Ω–µ",
            description: "–ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ",
            variant: "destructive"
          });
        } finally {
          unsubscribe();
        }
      });
      
      console.log("üîî –ü–æ–∫–∞–∑–≤–∞–º–µ –ø—Ä–æ–∑–æ—Ä–µ—Ü–∞ –∑–∞ –∞–±–æ–Ω–∏—Ä–∞–Ω–µ");
      await window.OneSignal.Slidedown.promptPush({ force: true });
    } catch (error) {
      console.error("‚ùå –û–±—âa –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–±–æ–Ω–∏—Ä–∞–Ω–µ:", error);
      toast({
        title: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞ –≥—Ä–µ—à–∫–∞",
        description: "–ù–µ –º–æ–∂–∞—Ö–º–µ –¥–∞ –æ–±—Ä–∞–±–æ—Ç–∏–º –∞–±–æ–Ω–∞–º–µ–Ω—Ç–∞",
        variant: "destructive"
      });
    } finally {
      setIsSubscribing(false);
    }
  };

  return (
    <Button
      className="bg-spasi-green hover:bg-spasi-green/90 text-white py-6 px-8 rounded-lg text-lg font-medium flex items-center gap-2 relative group overflow-hidden"
      onClick={handleSubscribe}
      disabled={isSubscribing || isSubscribed}
    >
      <span className="absolute inset-0 w-0 bg-white/20 transition-all duration-300 ease-out group-hover:w-full"></span>
      <Bell className="h-5 w-5 relative z-10" />
      <span className="relative z-10">
        {isSubscribing 
          ? "–û–±—Ä–∞–±–æ—Ç–∫–∞..." 
          : isSubscribed 
            ? "–ê–±–æ–Ω–∏—Ä–∞–Ω–∏ —Å—Ç–µ" 
            : "–ê–±–æ–Ω–∏—Ä–∞–π —Å–µ"
        }
      </span>
    </Button>
  );
};

export default NotificationButton;
